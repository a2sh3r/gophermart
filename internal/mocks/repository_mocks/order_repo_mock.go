// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/order_repository.go

// Package mocks is a generated GoMock package.
package repository_mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/a2sh3r/gophermart/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// GetOrderOwner mocks base method.
func (m *MockOrderRepository) GetOrderOwner(ctx context.Context, number string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderOwner", ctx, number)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderOwner indicates an expected call of GetOrderOwner.
func (mr *MockOrderRepositoryMockRecorder) GetOrderOwner(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderOwner", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderOwner), ctx, number)
}

// GetOrdersByUser mocks base method.
func (m *MockOrderRepository) GetOrdersByUser(ctx context.Context, userID int64) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUser", ctx, userID)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUser indicates an expected call of GetOrdersByUser.
func (mr *MockOrderRepositoryMockRecorder) GetOrdersByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUser", reflect.TypeOf((*MockOrderRepository)(nil).GetOrdersByUser), ctx, userID)
}

// GetUnprocessedOrders mocks base method.
func (m *MockOrderRepository) GetUnprocessedOrders(ctx context.Context) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnprocessedOrders", ctx)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnprocessedOrders indicates an expected call of GetUnprocessedOrders.
func (mr *MockOrderRepositoryMockRecorder) GetUnprocessedOrders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnprocessedOrders", reflect.TypeOf((*MockOrderRepository)(nil).GetUnprocessedOrders), ctx)
}

// SaveOrder mocks base method.
func (m *MockOrderRepository) SaveOrder(ctx context.Context, order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockOrderRepositoryMockRecorder) SaveOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockOrderRepository)(nil).SaveOrder), ctx, order)
}

// UpdateOrderStatus mocks base method.
func (m *MockOrderRepository) UpdateOrderStatus(ctx context.Context, order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockOrderRepositoryMockRecorder) UpdateOrderStatus(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockOrderRepository)(nil).UpdateOrderStatus), ctx, order)
}
