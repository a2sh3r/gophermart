// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/balance_repository.go

// Package mocks is a generated GoMock package.
package repository_mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/a2sh3r/gophermart/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockBalanceRepository is a mock of BalanceRepository interface.
type MockBalanceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceRepositoryMockRecorder
}

// MockBalanceRepositoryMockRecorder is the mock recorder for MockBalanceRepository.
type MockBalanceRepositoryMockRecorder struct {
	mock *MockBalanceRepository
}

// NewMockBalanceRepository creates a new mock instance.
func NewMockBalanceRepository(ctrl *gomock.Controller) *MockBalanceRepository {
	mock := &MockBalanceRepository{ctrl: ctrl}
	mock.recorder = &MockBalanceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceRepository) EXPECT() *MockBalanceRepositoryMockRecorder {
	return m.recorder
}

// GetBalance mocks base method.
func (m *MockBalanceRepository) GetBalance(ctx context.Context, userID int64) (models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, userID)
	ret0, _ := ret[0].(models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockBalanceRepositoryMockRecorder) GetBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockBalanceRepository)(nil).GetBalance), ctx, userID)
}

// GetWithdrawals mocks base method.
func (m *MockBalanceRepository) GetWithdrawals(ctx context.Context, userID int64) ([]models.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", ctx, userID)
	ret0, _ := ret[0].([]models.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockBalanceRepositoryMockRecorder) GetWithdrawals(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockBalanceRepository)(nil).GetWithdrawals), ctx, userID)
}

// IncreaseUserBalance mocks base method.
func (m *MockBalanceRepository) IncreaseUserBalance(ctx context.Context, userID int64, accrual float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseUserBalance", ctx, userID, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseUserBalance indicates an expected call of IncreaseUserBalance.
func (mr *MockBalanceRepositoryMockRecorder) IncreaseUserBalance(ctx, userID, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseUserBalance", reflect.TypeOf((*MockBalanceRepository)(nil).IncreaseUserBalance), ctx, userID, accrual)
}

// Withdraw mocks base method.
func (m *MockBalanceRepository) Withdraw(ctx context.Context, withdrawal models.Withdrawal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, withdrawal)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockBalanceRepositoryMockRecorder) Withdraw(ctx, withdrawal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockBalanceRepository)(nil).Withdraw), ctx, withdrawal)
}
